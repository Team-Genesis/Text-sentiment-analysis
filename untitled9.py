# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x49NEirjyk0VXzq_tCcfh3BnHLNY6sUB
"""

pip install vaderSentiment

import nltk
nltk.download('stopwords')
nltk.download('punkt')

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer 
from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize
from nltk.tokenize import sent_tokenize
pos_list={'know','aware'} #,'do','does','did'
neg_list={'decline'}
stop_word = set(stopwords.words('english')) - {"not","n't","do","does","did"} 
newStopWords = {'if','whether','however'}     #THINKING TO ADD WORDS LIKE BOOK OR ANSWER WHICH ARE NEUTRAL WORDS
stop_words=stop_word.union(newStopWords)

class myClass(object):
  def __init__(self, sentence):
    word_tokens = word_tokenize(sentence) 
    self.filtered_sentence = ""
    for w in word_tokens: 
      if w not in stop_words: 
        self.filtered_sentence= self.filtered_sentence +" " + w    

  def sentiment_scores(self):	   #This function tells the percent of positive sentences in a para
    sid_obj = SentimentIntensityAnalyzer() 
    pos_count=0
    neg_count=0
    temp=sent_tokenize(self.filtered_sentence)
    for sen in temp:
      sentiment_dict = sid_obj.polarity_scores(sen)
      if sentiment_dict['compound'] >= 0.05 :
        pos_count=pos_count+1
      elif sentiment_dict['compound'] <= - 0.05 :
        neg_count=neg_count+1
      else :  #This part will execute when vaderSentiment will give neutral i.e. 0.05 value. This part will cross check the value
        word_tokens = word_tokenize(sen)
        for w in word_tokens:
          if w in pos_list:
            if "n't" in sen or "not" in sen:
              neg_count=neg_count+1 
              break
          if w in neg_list:
            if "not" in sen or "not" in sen:
              pos_count=pos_count+1
              break   
    return (pos_count-neg_count)*100/(pos_count+neg_count)
    
# Driver code 
if __name__ == "__main__" :
  sentence = "Good Morning. I am doing fine. Thank you. I am so glad that the traffic was light this morning. No traffic jam and no accidents. Yes, I am. Please, tell me a little bit about the position. What type of qualifications do you require? What kind of experience are you looking for? I was a student at West Coast University, and I just graduated with a Bachelor degree in Finance. I have been working part-time as a payroll clerk for the last two years. The job should help me see what Finance is all about. I have learned a lot of Finance theories at school, and now it is time for me to put them into practice. I also hope that it will help me grow in my field. I am a hard-working person and a fast learner. I am very eager to learn, and I get along fine with people. No, I do not. John: Yes, I can. When I was going to school, I took quite a few courses each semester while working at least twenty hours every week. And, I handled that situation very well. No, I think I have a pretty good understanding of the job. I believe that I can handle it with ease, and I hope to have the opportunity to work for you. Nice meeting you too. Thank you for seeing me.\n" 
  obj=myClass(sentence)
  print(obj.sentiment_scores())
  sentence = " I would love to work in your company but however i will have to decline that offer"  #This statement does not give expected output. have to do something for that
  obj=myClass(sentence)
  print(obj.sentiment_scores())